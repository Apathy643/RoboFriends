{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","console","log","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAMC,EAAS,EAATA,GACvB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCULK,EAfE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACf,OACA,8BACKA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OAAQ,cACJ,EADI,CAEJR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHPS,SCOPC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,qBAAKV,UAAU,MAAf,SACI,uBACIA,UAAU,gCACVW,KAAM,SACNC,YAAY,gBACZC,SAAUH,OCCXI,G,MARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,aC6CJC,E,kDA3CX,aAAc,IAAD,8BACT,gBAiBJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,QAC1CC,QAAQC,IAAIL,EAAME,OAAOC,QAlBzB,EAAKG,MAAQ,CACTzB,OAAQ,GACRK,YAAa,IAJR,E,qDAQb,WAAoB,IAAD,OACfqB,MAAM,8CAA8CC,MAAK,SAAAC,GACzD,OAAQA,EAASC,UAEhBF,MAAK,SAAAG,GACF,EAAKV,SAAS,CAACpB,OAAQ8B,S,oBAU/B,WAAW,IAAD,OACAC,EAAiBC,KAAKP,MAAMzB,OAAOiC,QAAO,SAAAjC,GAC5C,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS,EAAKV,MAAMpB,YAAY6B,kBAErE,OAAiC,IAA7BF,KAAKP,MAAMzB,OAAOoC,OACX,0CAGP,sBAAKxC,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWU,aAAc0B,KAAKd,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,CAAUlB,OAAQ+B,a,GApChBM,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.519318d4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email,id }) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    return (\r\n    <div>\r\n        {robots.map((user, i) => {\r\n        return (<         \r\n            Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}\r\n        />)\r\n        })}\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-light-blue'\r\n                type ='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response => {\r\n        return (response.json());\r\n        })\r\n        .then(users => {\r\n            this.setState({robots: users})\r\n        });\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n        console.log(event.target.value)\r\n    }\r\n\r\n    render () {\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n        })\r\n        if (this.state.robots.length === 0){\r\n            return <h1> Loading</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f2'> RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll>\r\n                <CardList robots={filteredRobots}/>\r\n                </Scroll>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n \r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}